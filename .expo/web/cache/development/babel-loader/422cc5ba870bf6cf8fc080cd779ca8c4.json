{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/matthewdev/CodingProjects/BruinLabsGroup10/screens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport * as Google from \"expo-google-app-auth\";\nimport ApiKeys from \"../constants/ApiKeys\";\nimport * as firebase from \"firebase\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { setProfile } from \"../FirebaseFunctions.js\";\n\nvar LoginScreen = function (_React$Component) {\n  _inherits(LoginScreen, _React$Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.login = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                iosClientId: ApiKeys.authClient.iosID,\n                scopes: [\"profile\", \"email\"]\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === \"success\")) {\n                _context.next = 9;\n                break;\n              }\n\n              _this.onSignIn(result);\n\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 9:\n              console.log(\"Cancelled\");\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(\"error\");\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    _this.onSignIn = function (googleUser) {\n      console.log(\"Google Auth Response\", googleUser);\n      var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n        unsubscribe();\n\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\n          var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n          console.log(credential);\n          firebase.auth().signInWithCredential(credential).then(function (result) {\n            console.log(\"Signed in!\");\n\n            if (result.additionalUserInfo.isNewUser) {\n              setProfile(result);\n            }\n          }).catch(function (error) {\n            console.log(\"error signing in\");\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            var email = error.email;\n            var credential = error.credential;\n          });\n        } else {\n          console.log(\"User already signed-in Firebase.\");\n        }\n      }.bind(_assertThisInitialized(_this)));\n    };\n\n    _this.isUserEqual = function (googleUser, firebaseUser) {\n      if (firebaseUser) {\n        var providerData = firebaseUser.providerData;\n\n        for (var i = 0; i < providerData.length; i++) {\n          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(SafeAreaView, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/icon.png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      }, \"Bruin Labs Group 10\"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }\n      }, \"Short Description\"), React.createElement(Button, {\n        title: \"Log In Or Register With Google\",\n        onPress: this.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return LoginScreen;\n}(React.Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/matthewdev/CodingProjects/BruinLabsGroup10/screens/LoginScreen.js"],"names":["React","Google","ApiKeys","firebase","setProfile","LoginScreen","login","logInAsync","iosClientId","authClient","iosID","scopes","result","type","onSignIn","accessToken","console","log","googleUser","unsubscribe","auth","onAuthStateChanged","firebaseUser","isUserEqual","credential","GoogleAuthProvider","idToken","signInWithCredential","then","additionalUserInfo","isNewUser","catch","error","errorCode","code","errorMessage","message","email","bind","providerData","i","length","providerId","PROVIDER_ID","uid","getBasicProfile","getId","styles","container","require","Component","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as Google from \"expo-google-app-auth\";\nimport ApiKeys from \"../constants/ApiKeys\";\nimport * as firebase from \"firebase\";\nimport {\n  View,\n  SafeAreaView,\n  Text,\n  Image,\n  StyleSheet,\n  Button,\n} from \"react-native\";\nimport { setProfile } from \"../FirebaseFunctions.js\";\n\nexport default class LoginScreen extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Image source={require(\"../assets/icon.png\")} />\n        <Text>Bruin Labs Group 10</Text>\n        <Text>Short Description</Text>\n        <Button\n          title=\"Log In Or Register With Google\"\n          onPress={this.login}\n        ></Button>\n      </SafeAreaView>\n    );\n  }\n\n  login = async () => {\n    try {\n      const result = await Google.logInAsync({\n        //androidClientId: YOUR_CLIENT_ID_HERE,\n        iosClientId: ApiKeys.authClient.iosID,\n        scopes: [\"profile\", \"email\"],\n      });\n\n      if (result.type === \"success\") {\n        this.onSignIn(result);\n        return result.accessToken;\n      } else {\n        console.log(\"Cancelled\");\n      }\n    } catch (e) {\n      console.log(\"error\");\n    }\n  };\n\n  onSignIn = (googleUser) => {\n    console.log(\"Google Auth Response\", googleUser);\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n    var unsubscribe = firebase.auth().onAuthStateChanged(\n      function (firebaseUser) {\n        unsubscribe();\n        // Check if we are already signed-in Firebase with the correct user.\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\n          // Build Firebase credential with the Google ID token.\n\n          const credential = firebase.auth.GoogleAuthProvider.credential(\n            googleUser.idToken, //Changed from original, check 3:00 of tutorial\n            googleUser.accessToken\n          );\n\n          // Sign in with credential from the Google user.\n          console.log(credential);\n          firebase //This function is not working RN!\n            .auth()\n            .signInWithCredential(credential)\n            .then(function (result) {\n              console.log(\"Signed in!\");\n\n              if (result.additionalUserInfo.isNewUser) {\n                setProfile(result);\n              }\n            })\n            .catch(function (error) {\n              // Handle Errors here.\n              console.log(\"error signing in\");\n              var errorCode = error.code;\n              var errorMessage = error.message;\n              // The email of the user's account used.\n              var email = error.email;\n              // The firebase.auth.AuthCredential type that was used.\n              var credential = error.credential;\n              // ...\n            });\n        } else {\n          console.log(\"User already signed-in Firebase.\");\n        }\n      }.bind(this)\n    );\n  };\n\n  isUserEqual = (googleUser, firebaseUser) => {\n    if (firebaseUser) {\n      var providerData = firebaseUser.providerData;\n      for (var i = 0; i < providerData.length; i++) {\n        if (\n          providerData[i].providerId ===\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\n          providerData[i].uid === googleUser.getBasicProfile().getId()\n        ) {\n          // We don't need to reauth the Firebase connection.\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}